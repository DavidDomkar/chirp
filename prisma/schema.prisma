// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  password  String    @map("hashedPassword")
  name      String
  posts     Post[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  likes     Like[]
  dislikes  Dislike[]

  @@map("users")
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  authorId  String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  likes     Like[]
  dislikes  Dislike[]

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  postId    String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("likes")
}

model Dislike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  postId    String   @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("dislikes")
}
